/*
 * This file is generated by jOOQ.
 */
package org.nitesh.jOOQ.tables.records;


import org.nitesh.jOOQ.tables.Book;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookRecord extends UpdatableRecordImpl<BookRecord> implements Record4<Long, LocalDate, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>BOOK.ID</code>.
     */
    public BookRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>BOOK.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>BOOK.PUBLISHINGDATE</code>.
     */
    public BookRecord setPublishingdate(LocalDate value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>BOOK.PUBLISHINGDATE</code>.
     */
    public LocalDate getPublishingdate() {
        return (LocalDate) get(1);
    }

    /**
     * Setter for <code>BOOK.TITLE</code>.
     */
    public BookRecord setTitle(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>BOOK.TITLE</code>.
     */
    public String getTitle() {
        return (String) get(2);
    }

    /**
     * Setter for <code>BOOK.VERSION</code>.
     */
    public BookRecord setVersion(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>BOOK.VERSION</code>.
     */
    public Integer getVersion() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, LocalDate, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, LocalDate, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Book.BOOK.ID;
    }

    @Override
    public Field<LocalDate> field2() {
        return Book.BOOK.PUBLISHINGDATE;
    }

    @Override
    public Field<String> field3() {
        return Book.BOOK.TITLE;
    }

    @Override
    public Field<Integer> field4() {
        return Book.BOOK.VERSION;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDate component2() {
        return getPublishingdate();
    }

    @Override
    public String component3() {
        return getTitle();
    }

    @Override
    public Integer component4() {
        return getVersion();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDate value2() {
        return getPublishingdate();
    }

    @Override
    public String value3() {
        return getTitle();
    }

    @Override
    public Integer value4() {
        return getVersion();
    }

    @Override
    public BookRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public BookRecord value2(LocalDate value) {
        setPublishingdate(value);
        return this;
    }

    @Override
    public BookRecord value3(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public BookRecord value4(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public BookRecord values(Long value1, LocalDate value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BookRecord
     */
    public BookRecord() {
        super(Book.BOOK);
    }

    /**
     * Create a detached, initialised BookRecord
     */
    public BookRecord(Long id, LocalDate publishingdate, String title, Integer version) {
        super(Book.BOOK);

        setId(id);
        setPublishingdate(publishingdate);
        setTitle(title);
        setVersion(version);
    }
}
