/*
 * This file is generated by jOOQ.
 */
package org.nitesh.jOOQ.tables.records;


import org.nitesh.jOOQ.tables.AuthorBook;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorBookRecord extends UpdatableRecordImpl<AuthorBookRecord> implements Record2<Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>AUTHOR_BOOK.AUTHOR_ID</code>.
     */
    public AuthorBookRecord setAuthorId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>AUTHOR_BOOK.AUTHOR_ID</code>.
     */
    public Long getAuthorId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>AUTHOR_BOOK.BOOK_ID</code>.
     */
    public AuthorBookRecord setBookId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>AUTHOR_BOOK.BOOK_ID</code>.
     */
    public Long getBookId() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return AuthorBook.AUTHOR_BOOK.AUTHOR_ID;
    }

    @Override
    public Field<Long> field2() {
        return AuthorBook.AUTHOR_BOOK.BOOK_ID;
    }

    @Override
    public Long component1() {
        return getAuthorId();
    }

    @Override
    public Long component2() {
        return getBookId();
    }

    @Override
    public Long value1() {
        return getAuthorId();
    }

    @Override
    public Long value2() {
        return getBookId();
    }

    @Override
    public AuthorBookRecord value1(Long value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public AuthorBookRecord value2(Long value) {
        setBookId(value);
        return this;
    }

    @Override
    public AuthorBookRecord values(Long value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorBookRecord
     */
    public AuthorBookRecord() {
        super(AuthorBook.AUTHOR_BOOK);
    }

    /**
     * Create a detached, initialised AuthorBookRecord
     */
    public AuthorBookRecord(Long authorId, Long bookId) {
        super(AuthorBook.AUTHOR_BOOK);

        setAuthorId(authorId);
        setBookId(bookId);
    }
}
